// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: associations.sql

package sqlc

import (
	"context"
)

const createAssociation = `-- name: CreateAssociation :one
INSERT INTO GoalToLogEntry (
    goalid ,
    logentryid
  )
VALUES(
  ?,
  ?
  )
  RETURNING goalid, logentryid
`

type CreateAssociationParams struct {
	Goalid     int64 `json:"goalid"`
	Logentryid int64 `json:"logentryid"`
}

func (q *Queries) CreateAssociation(ctx context.Context, arg CreateAssociationParams) (*GoalToLogEntry, error) {
	row := q.db.QueryRowContext(ctx, createAssociation, arg.Goalid, arg.Logentryid)
	var i GoalToLogEntry
	err := row.Scan(&i.Goalid, &i.Logentryid)
	return &i, err
}

const getAssociations = `-- name: GetAssociations :many
SELECT
  goalid, logentryid
FROM
  GoalToLogEntry
ORDER BY
  GoalID
`

func (q *Queries) GetAssociations(ctx context.Context) ([]*GoalToLogEntry, error) {
	rows, err := q.db.QueryContext(ctx, getAssociations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GoalToLogEntry
	for rows.Next() {
		var i GoalToLogEntry
		if err := rows.Scan(&i.Goalid, &i.Logentryid); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssociationsByGoalID = `-- name: GetAssociationsByGoalID :many
SELECT
  goalid, logentryid
FROM
  GoalToLogEntry
WHERE
  GoalID = ?
ORDER BY
  GoalID
`

func (q *Queries) GetAssociationsByGoalID(ctx context.Context, goalid int64) ([]*GoalToLogEntry, error) {
	rows, err := q.db.QueryContext(ctx, getAssociationsByGoalID, goalid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GoalToLogEntry
	for rows.Next() {
		var i GoalToLogEntry
		if err := rows.Scan(&i.Goalid, &i.Logentryid); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssociationsByLogEntryID = `-- name: GetAssociationsByLogEntryID :many
SELECT
  goalid, logentryid
FROM
  GoalToLogEntry
WHERE
  LogEntryID = ?
ORDER BY
  GoalID
`

func (q *Queries) GetAssociationsByLogEntryID(ctx context.Context, logentryid int64) ([]*GoalToLogEntry, error) {
	rows, err := q.db.QueryContext(ctx, getAssociationsByLogEntryID, logentryid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GoalToLogEntry
	for rows.Next() {
		var i GoalToLogEntry
		if err := rows.Scan(&i.Goalid, &i.Logentryid); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
